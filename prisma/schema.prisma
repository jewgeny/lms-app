// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String?
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  deletedAt     DateTime?
  assignedLeads Lead[]    @relation("UserAssignedLeads")
  image         String?
  Post Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdBy User     @relation(fields: [createdById], references: [id])
  createdById String
}

model Profile {
  id     String  @id @default(cuid())
  bio    String?
  image  String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
}

model Lead {
  id           Int        @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String     @unique
  phone        String?
  status       LeadStatus @default(NEW)
  createdAt    DateTime   @default(now())
  assignedTo   User?      @relation(fields: [assignedToId], references: [id], name: "UserAssignedLeads")
  assignedToId String?
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String?
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  LOST
  WON
}
